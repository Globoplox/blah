services:
  api-1: &api
    build:
      context: .
      dockerfile: Dockerfile-api
    environment:
      - ENV
      - BIND_URI=tcp://0.0.0.0:80
      - DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgsql:5432/${POSTGRES_DB}
      - CLIENT_ORIGIN=http://localhost:8080
      - S3_REGION
      - S3_KEY
      - S3_SECRET
      - S3_ENDPOINT=http://s3:9000
      - S3_PUBLIC_HOST=http://localhost:9000
      - S3_BUCKET_PREFIX=blah-app-api
      - BUCKET=main
      - S3_BUCKET_SUFFIX=${ENV}
      - S3_ACCESS_VHOST=false
      - REDIS_PASSWORD
      - REDIS_DB=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_POOL_SIZE=20
    depends_on:
      pgsql:
        condition: service_healthy
      redis:
        condition: service_started
      s3:
        condition: service_started
  api-2: *api
  nginx:
      image: nginx:1.25.1-alpine
      depends_on:
        api-1:
          condition: service_started
        api-2:
          condition: service_started  
      ports:
      - "80:80"
      volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
  s3:
    image: minio/minio:latest
    environment:
      - "MINIO_ROOT_USER=${S3_KEY}"
      - "MINIO_ROOT_PASSWORD=${S3_SECRET}"
    command: ["server", "/data", "--console-address", ":9090"]
    ports:
      - "9090:9090"
      - "9000:9000"
  pgsql:
    image: postgis/postgis:15-3.4-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-u", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB
    ports:
      - "5432:5432"
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    command: >
      -- requirepass "${REDIS_PASSWORD}"
