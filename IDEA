Compiler refactor:
Begin dumbest possible way that work:
- Not any kind of optimization
- No offset (neither on global or local, access does an addition)
- Addi is not even necessary
- No register caching or anything: grab, load on read, write after assignation


Main issue is:
  16b address bus is too low and everything must be very small.
  Solution is to use memory paging and swapping.
  But how to integrate it with program 'easely' ?

Split the ram space in n segments.
  Each segments have control register(s?) to swap the loaded page with another one.
  OS can: load, link, unload programs and memory region, schedule and swap contexts

  OS maintain a list of:
  - All programs
  - All libraries
    - Exported symbols
  - All dynamic memory regions and their allocations
  - All pages and their contents


  But a single program cannot live in a single page, it may even be larger than the whole available memory space.
  - Split programs and libraries in page sized blocks
  - call to function from another block is a syscall (somehow that handles dynamic linking)
  - dynamic memory handles are not directly pointer but a call that return a pointer

  

Memory space:
  - rom
  - os
  - registers